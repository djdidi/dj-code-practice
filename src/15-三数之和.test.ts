import { expect, test } from 'vitest';

/**
 * 思路: 排序 + 双指针
 * - 排序
 * - 固定一个值，前后双指针扫后面区域，求和
 * - **注意去重**
 *
 * O(NLogN) + O(N^2) = O(N^2)
 */
function threeSum(nums: number[]): number[][] {
  let ans: number[][] = [];

  // O(NLog(N))
  nums = nums.sort((a, b) => a - b);

  // O(N^2)
  for (let i = 0; i < nums.length - 2; i++) {
    // 一些不用遍历的条件
    if (nums[i] > 0) break;
    if (i > 0 && nums[i - 1] === nums[i]) continue;

    let p1 = i + 1;
    let p2 = nums.length - 1;

    while (p1 < p2) {
      let sum = nums[i] + nums[p1] + nums[p2];

      if (sum === 0) {
        ans.push([nums[i], nums[p1], nums[p2]]);
        // 去重-移动到下一项不重复时
        while (p1 < p2 && nums[p1 + 1] === nums[p1]) {
          p1++;
        }
        while (p1 < p2 && nums[p2 - 1] === nums[p2]) {
          p2--;
        }
        // 正常两侧同时移动
        p1++;
        p2--;
      }
      if (sum < 0) p1++;
      if (sum > 0) p2--;
    }
  }

  return ans;
}

test('threeSum', () => {
  expect(threeSum([-2, 0, 1, 1, 2])).toEqual([
    [-2, 0, 2],
    [-2, 1, 1],
  ]);
  expect(threeSum([-1, 0, 1, 2, -1, -4])).toEqual([
    [-1, -1, 2],
    [-1, 0, 1],
  ]);
  expect(threeSum([0, 1, 1])).toEqual([]);
  expect(threeSum([0, 0, 0])).toEqual([[0, 0, 0]]);
  expect(threeSum([0, 0, 0, 0])).toEqual([[0, 0, 0]]);
  expect(threeSum([1, -1, -1, 0])).toEqual([[-1, 0, 1]]);
  expect(
    threeSum([
      34, 55, 79, 28, 46, 33, 2, 48, 31, -3, 84, 71, 52, -3, 93, 15, 21, -43, 57, -6, 86, 56, 94, 74, 83, -14, 28, -66,
      46, -49, 62, -11, 43, 65, 77, 12, 47, 61, 26, 1, 13, 29, 55, -82, 76, 26, 15, -29, 36, -29, 10, -70, 69, 17, 49,
    ]),
  ).toEqual([
    [-82, -11, 93],
    [-82, 13, 69],
    [-82, 17, 65],
    [-82, 21, 61],
    [-82, 26, 56],
    [-82, 33, 49],
    [-82, 34, 48],
    [-82, 36, 46],
    [-70, -14, 84],
    [-70, -6, 76],
    [-70, 1, 69],
    [-70, 13, 57],
    [-70, 15, 55],
    [-70, 21, 49],
    [-70, 34, 36],
    [-66, -11, 77],
    [-66, -3, 69],
    [-66, 1, 65],
    [-66, 10, 56],
    [-66, 17, 49],
    [-49, -6, 55],
    [-49, -3, 52],
    [-49, 1, 48],
    [-49, 2, 47],
    [-49, 13, 36],
    [-49, 15, 34],
    [-49, 21, 28],
    [-43, -14, 57],
    [-43, -6, 49],
    [-43, -3, 46],
    [-43, 10, 33],
    [-43, 12, 31],
    [-43, 15, 28],
    [-43, 17, 26],
    [-29, -14, 43],
    [-29, 1, 28],
    [-29, 12, 17],
    [-14, -3, 17],
    [-14, 1, 13],
    [-14, 2, 12],
    [-11, -6, 17],
    [-11, 1, 10],
    [-3, 1, 2],
  ]);
  expect(threeSum([2, -3, 0, -2, -5, -5, -4, 1, 2, -2, 2, 0, 2, -4, 5, 5, -10])).toEqual([
    [-10, 5, 5],
    [-5, 0, 5],
    [-4, 2, 2],
    [-3, -2, 5],
    [-3, 1, 2],
    [-2, 0, 2],
  ]);
});
